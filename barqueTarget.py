import subprocess

class Target(object):
    """An object representing a VM or LXC container that is 
    currently the target of a Barque operation. These are ephemeral
    and are generated by the Barque Worker process as needed, and 
    destroyed when the task is complete or any situation which halts
    execution of this target's functions.
    This object contains all functions and operations which involve
    manipulating a VM or container. The worker process is responsible
    for communicating with, and storing state in, the redis database. 
    """

    #TODO: Add logic for check_snapshot

    def __init__(self, vmid, job, resource_type, destination, file_target, proxconn, ceph_pool, ceph_vmdisk, ha_group):
        """Return a Target object whose proxmox vmid is *vmid*, job type is 
        *job*, resource type (ct||vm) is *resource_type*, configured storage 
        destination is *destination*, file target is *file_target*, and 
        proxmoxer object connecting to proxmox as *proxconn*"""
        self.vmid = vmid
        self.job = job
        self.resource_type = resource_type
        self.destination = destination
        self.file_target = file_target
        self.proxconn = proxconn
        self.ceph_pool = ceph_pool
        self.ceph_vmdisk = ceph_vmdisk
        self.ha_group = ha_group
    def check_snapshot(self):
        """Check if barque snapshot exists in ceph.
        Returns True if exists, False if not."""
        pass
    def snapshot_create(self, undo=False):
        """Function for creating or removing (undo) the barque snapshot.
        returns boolean Error and string message."""
        if not undo:
            try:
                subprocess.check_output('rbd snap create {}/{}@barque'.format(self.ceph_pool, self.ceph_vmdisk), shell=True)
            except:
                if self.check_snapshot:
                    return False, "Snapshot already exists"
                return True, "error creating barque snapshot"
            return False, "barque snapshot created"
        else:
            try:
                subprocess.check_output('rbd snap rm {}/{}@barque'.format(self.ceph_pool, self.ceph_vmdisk), shell=True)
            except:
                if not self.check_snapshot:
                    return False, "snapshot does not exist"
                return True, "error removing barque snapshot"
            return False, "barque snapshot removed"
    def snapshot_protect(self, undo):
        if not undo:
            try:
                subprocess.check_output('rbd snap protect {}/{}@barque'.format(self.ceph_pool, self.ceph_vmdisk), shell=True)
            except:
                pass
        else:
            try:
                subprocess.check_output('rbd snap unprotect {}/{}@barque'.format(self.ceph_pool, self.ceph_vmdisk), shell=True)
            except:
                pass
    def copy_config(self):
        pass #Do we really need to copy config files?
    def create_backup(self, undo):
        if not undo:
            try:
                subprocess.check_output("rbd export --rbd-concurrent-management-ops 20 --export-format 2 {}/{}@barque - | lz4 -1 - {}".format(self.ceph_pool, self.ceph_vmdisk, self.file_target), shell=True)  # .split('\n') #run command then convert output to list, splitting on newline
            except:
                return True, "error creating backup file"
            return False, "backup file created"
        else:
            try:
                subprocess.check_output("rm {}".format(self.file_target))
            except:
                return True, "error removing backup file"
            return False, "backup file removed"
    def ha_remove(self, undo):
        if not undo:
            try:
                subprocess.check_output("ha-manager remove {}:{}".format(self.resource_type, self.vmid))
            except:
                return True, "error removing {} from ha-manager".format(self.vmid)
            return False, "removed from ha-manager"
        else:
            try:
                subprocess.check_output("ha-manager add {}:{} -group {}".format(self.resource_type, self.vmid, self.ha_group))
            except:
                return True, "error adding {} to ha-manager with group {}".format(self.vmid, self.ha_group)
            return False, "added to ha-manager"
    def stop(self, undo):
        if not undo:
            if self.resource_type == "ct":
                try:
                    subprocess.check_output("pct stop {}".format(self.vmid))
                except:
                    return True, "error starting container"
                return False, "container started"
            if self.resource_type == "vm":
                try:
                    pass
                except:
                    return True, "error starting vm"
                return False, "vm started"
            return True, "resource type unrecognized!"
    def create_recovery(self, undo):
        if not undo:
            error, message = self.unmount_rbd()
            if not error:          
                try:
                    subprocess.check_output("rbd mv {}/{} {}/{}-barque".format(self.ceph_pool, self.ceph_vmdisk, self.ceph_pool, self.ceph_vmdisk))
                except:
                    return True, "error creating disaster recovery image"
                return False, "disaster recovery image created"
            else:
                return True, message
        else:
            error, message = self.unmount_rbd()
            if not error:
                try:
                    subprocess.check_output("rbd mv {}/{}-barque {}/{}".format(self.ceph_pool, self.ceph_vmdisk, self.ceph_pool, self.ceph_vmdisk))
                except: 
                    return True, "error reverting to disaster recovery image"
                return False, "reverted to disaster recovery image"
            else:
                return True, message

    def remove_storage(self, undo):
        pass
    def extract_backup_image(self, undo):
        pass
    def import_backup_image(self):
        pass
    def unmount_rbd(self):
        pass